generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                String           @id @default(cuid())
  name              String?
  email             String?          @unique
  emailVerified     DateTime?
  image             String?
  password          String?
  role              Role             @default(user)
  userType          UserType         @default(parent)
  availableSessions Int              @default(0)
  packageType       String           @default("Standard")
  phone             String?
  address           String?
  city              String?
  postcode          String?
  profileComplete   Boolean          @default(false)
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  accounts          Account[]
  bookings          Booking[]
  sessionHistory    SessionHistory[]
  learners          Learner[]
  payments          Payment[]
  sessions          Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Booking {
  id          String    @id @default(cuid())
  date        DateTime
  hour        Int
  slotNumber  Int
  studentName String
  package     String
  sessionType String
  status      String    @default("pending")
  userEmail   String
  learnerId   String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  learner     Learner   @relation(fields: [learnerId], references: [id])
  user        User      @relation(fields: [userEmail], references: [email])
  Payment     Payment[] @relation("BookingToPayment")

  @@index([userEmail])
  @@index([learnerId])
}

model Payment {
  id        String    @id @default(cuid())
  amount    Float
  status    String    @default("pending")
  type      String
  userEmail String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userEmail], references: [email])
  bookings  Booking[] @relation("BookingToPayment")

  @@index([userEmail])
}

model Learner {
  id          String    @id @default(cuid())
  name        String
  email       String?   @unique
  password    String?
  dateOfBirth DateTime?
  schoolYear  Int?
  subjects    String[]
  isAdult     Boolean   @default(false)
  parentId    String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  bookings    Booking[]
  parent      User?     @relation(fields: [parentId], references: [id])

  @@index([parentId])
}

model SessionAvailability {
  id        String   @id @default(cuid())
  dayOfWeek Int
  startTime Int
  endTime   Int
  maxSlots  Int      @default(3)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BlockedDate {
  id        String   @id @default(cuid())
  date      DateTime
  reason    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CustomSessionTime {
  id        String   @id @default(cuid())
  date      DateTime
  startTime Int
  endTime   Int
  maxSlots  Int      @default(3)
  reason    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SessionHistory {
  id        String   @id @default(cuid())
  userId    String
  amount    Int
  category  String
  reason    String
  type      String
  adminId   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

enum UserType {
  parent
  independent_learner
}

enum Role {
  user
  admin
}
