// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          String    @default("user")
  credits       Int       @default(0)
  packageType   String    @default("Standard")
  accounts      Account[]
  sessions      Session[]
  bookings      Booking[]
  payments      Payment[]
  creditHistory CreditHistory[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Booking {
  id          String   @id @default(cuid())
  date        DateTime
  hour        Int
  slotNumber  Int
  studentName String
  package     String
  sessionType String
  status      String   @default("pending")
  userEmail   String
  user        User     @relation(fields: [userEmail], references: [email])
  payment     Payment? @relation(fields: [paymentId], references: [id])
  paymentId   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userEmail])
  @@index([date])
}

model Payment {
  id        String    @id @default(cuid())
  amount    Float
  status    String    @default("pending")
  type      String
  userEmail String
  user      User      @relation(fields: [userEmail], references: [email])
  bookings  Booking[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([userEmail])
}

model CreditHistory {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  amount    Int
  category  String   // sponsor, reward, cancellation, loyalty, special
  reason    String
  type      String   // CREDIT or DEBIT
  adminId   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
} 